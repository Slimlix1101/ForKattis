
#include <iostream>
#include <vector>
#include <cstdlib>

using namespace std;

struct Node {
	Node* parent;
	vector<Node *> child; // childcount can be more than one
	int value;
	int height;
	bool isLeave;
};

int FindRootValue (Node node){
	if (node.parent->value == -1) return node.value; // the final node without a parent is the root
	else return FindRootValue(*node.parent);
}

void SetHeight(Node &node, int heightcnt) // & points to the node in array
{
	if ((*node.parent).value == -1) {
		if (heightcnt > node.height) node.height = heightcnt;
		return;
	} else {
		if (heightcnt > node.height) node.height = heightcnt;
		return SetHeight(*node.parent, heightcnt+1);
	}	
}



/*int DFS(Node node, int depth, int maxdepth, int visited, int tsize)
{
	if (node.child.size() == 0) {
		if (depth > maxdepth) return depth;
		else return maxdepth;
	} else {
		for (int i = 0; i<node.child.size(); i++)
		{
			visited++;
			maxdepth = DFS(*node.child[i], depth+1, maxdepth, visited, tsize);
			if (visited == tsize) break; // all nodes visited
		}	
	}
	return maxdepth;
} find max length of the tree*/


Node NodeList[100000];
Node nullNode; 
// when a node's parent is nullcode, whose value is -1, it is the root node

int main()
{
	int n, childcount, input, rootv;
	long long int total;
	nullNode.value = -1;
	for (int i = 0 ;i<100000; i++)
	{
		NodeList[i].value=i+1;
	}
		
	while (cin >> n)
	{	
		total = 0;
		for (int i = 0; i<n; i++)
		{
			NodeList[i].parent = &nullNode; // set every node's parent to null
			NodeList[i].height = 0;
			NodeList[i].isLeave = false;
		}
			
		for (int i = 0; i<n; i++)
		{
			cin >> childcount;
			NodeList[i].child.resize(0); // resize chidl's vector
			if (childcount == 0) NodeList[i].isLeave=true;
			for (int k=0; k<childcount; k++)
			{
				cin >> input;
				NodeList[i].child.push_back(&NodeList[input-1]); // get a child of the node, save it
				NodeList[input-1].parent = &NodeList[i]; // set the child's parent to cureent node
			}	
		}
		rootv = FindRootValue(NodeList[rand()%n]); // randomly choose a node to find the root
		cout << rootv << endl; 
		for (int i = 0 ; i<n; i++)
			if (NodeList[i].isLeave) SetHeight(NodeList[i], 0);	
		for (int i = 0; i<n; i++)
			if (!NodeList[i].isLeave) total+=NodeList[i].height;
			
		cout << total << endl;
		
	}
		
}
