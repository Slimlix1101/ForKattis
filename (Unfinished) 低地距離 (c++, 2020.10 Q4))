#include <iostream>
using namespace std;

// 3. finding max value within every possible route
// DAG: cant return
// find 


int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, temp, value;
	while (cin >> n)
	{
		int pos[n][3], line[n*2];
		for (int i=0; i<n; i++)
			for (int k=0; k<3; k++)
				pos[i][k] = -1;
		for (int i = 0 ; i<2*n; i++)
		{
			cin >> temp;
			if (pos[temp-1][0] == -1) pos[temp-1][0] = i;
			else pos[temp-1][1] = i; 
			// pos[n][0] and pos[n][1] is the first and second pos of n+1
		}
		for (int i=0 ; i<n; i++)
		{
			line[pos[i][0]] = 1;
			line[pos[i][1]] = 1;
			value = 0;
			for (int k = pos[i][0]+1 ; k< pos[i][1]; k++)
			{
				//cout << "line[" << k << "] is " << line[k] << endl;
				if (line[k] == 1) value++;
			}
				
			//cout << "smaller value between a pair of " << i+1 << " is " << value << endl; 
			pos[i][2] = value;
		}
		temp = 0;
		for (int i=0; i<n; i++)
			temp+=pos[i][2];
			
		cout << temp << endl;
		
	}

	
	return 0;
}
